{"version":3,"file":"static/js/115.79fb536b.chunk.js","mappings":"kPAwBe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoDF,EAAAA,EAAAA,UAAS,IAA7D,eAAOG,EAAP,KAA2BC,EAA3B,KACA,GAA8CJ,EAAAA,EAAAA,WAAS,GAAvD,eAAOK,EAAP,KAAwBC,EAAxB,KACA,GAA8CN,EAAAA,EAAAA,WAAS,GAAvD,eACA,GADA,WACwDA,EAAAA,EAAAA,WAAS,IAAjE,eAAOO,EAAP,KAA6BC,EAA7B,KACA,GAAoDR,EAAAA,EAAAA,WAAS,GAA7D,eAA2BS,GAA3B,WACA,GAAyBC,EAAAA,EAAAA,MAAlBC,GAAP,eAEMC,GAAwBC,EAAAA,EAAAA,KAC5B,SAACC,GAAD,OAAWA,EAAMC,QAAQC,eAAeC,WAEpCC,GAAQL,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,QAAQI,cAAcD,UAC/CL,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,QAAQK,KAAKC,UAE5DC,EAAAA,EAAAA,YAAU,WACJV,GACFhB,EAAS,WAEV,CAACgB,EAAuBhB,IAuD3B,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CACE2B,MAAM,QACNC,OAAO,QACPC,QAAQ,OACRC,aAAa,OAJf,WAME,SAAC,KAAD,CAAOF,OAAO,OAAd,8BAECjB,IACC,SAAC,KAAD,CAAWoB,MAAM,UAAjB,uCAEDtB,IACC,SAAC,KAAD,CAAWsB,MAAM,UAAjB,sHAMF,SAAC,KAAD,CACEC,MAAM,mBACNC,YAAY,2BACZC,KAAK,WACLC,MAAO9B,EACP+B,SAAU,SAACC,GAAD,OAjCSF,EAiCgBE,EAAEC,OAAOH,WAhClD7B,EAAe6B,GADS,IAACA,MAmCrB,SAAC,KAAD,CACEH,MAAM,mBACNC,YAAY,6BACZC,KAAK,WACLC,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OApCYF,EAoCgBE,EAAEC,OAAOH,WAnCrD3B,EAAsB2B,GADK,IAACA,MAuCxB,SAAC,KAAD,WACE,SAAC,KAAD,CAAQJ,MAAM,UAAUQ,QA3EH,WAG3B,OAAIlC,IAAgBE,GAClBK,GAAwB,QACxBF,GAAmB,IAHnB,qEAMM8B,KAAKjC,QAMbQ,EAAe,CAAER,mBAAAA,EAAoBe,MAAAA,IAClCmB,SACAC,MAAK,SAACC,GACLC,QAAQC,IAAI,OAAQF,GAChBA,EAAKG,SACPlC,GAAwB,GACxBF,GAAmB,GACnBV,EAAS,WAETA,EAAS,8BAGZ+C,OAAM,SAACC,GACN9C,EAASW,EAAsBmC,EAAMF,UACrCF,QAAQC,IAAI,MAAOG,OAnBrBtC,GAAmB,QACnBE,GAAwB,KAiEpB,uBAKF,SAAC,KAAD","sources":["pages/ChangePassword/index.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { postChangePassword } from \"../../api\";\r\nimport {\r\n  Back,\r\n  Button,\r\n  ButtonBar,\r\n  Container,\r\n  InputGroup,\r\n  Page,\r\n  Paragraph,\r\n  Title,\r\n} from \"../../components/common\";\r\nimport { changePassword, login } from \"../../store/actions/auth\";\r\nimport { useSetNewPasswordMutation } from \"../../store/slice/api\";\r\nimport {\r\n  passwordChanged,\r\n  requestChangePassword,\r\n  setChangePasswordError,\r\n} from \"../../store/slice/mainSlice\";\r\n\r\nexport default function ChangePassword() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n  const [isSpecialLetter, setIsSpecialLetter] = useState(false);\r\n  const [isCapitalLetter, setIsCapitalLetter] = useState(false);\r\n  const [confirmPasswordError, setConfirmPasswordError] = useState(false);\r\n  const [resetPasswordError, setResetPasswordError] = useState(false);\r\n  const [addNewPassword] = useSetNewPasswordMutation();\r\n\r\n  const changePasswordSuccess = useSelector(\r\n    (state) => state.reducer.changePassword.success\r\n  );\r\n  const email = useSelector((state) => state.reducer.resetPassword.email);\r\n  const authToken = useSelector((state) => state.reducer.auth.token);\r\n\r\n  useEffect(() => {\r\n    if (changePasswordSuccess) {\r\n      navigate(\"/home\");\r\n    }\r\n  }, [changePasswordSuccess, navigate]);\r\n\r\n  // const handleSubmit = async e => {\r\n  //   e.preventDefault()\r\n  //   const token = `Token ${authToken}`\r\n\r\n  //   dispatch(requestChangePassword())\r\n  //   try {\r\n  //     await postChangePassword(password, confirmedPassword, token)\r\n  //     dispatch(passwordChanged())\r\n  //     navigate(\"/login\")\r\n  //   } catch (error) {\r\n  //     dispatch(setChangePasswordError(error.message))\r\n  //   }\r\n  // }\r\n\r\n  const handleChangePassword = () => {\r\n    const re =\r\n      /^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])(?=.*[0-9])(?=.*[a-z])/;\r\n    if (newPassword !== confirmNewPassword) {\r\n      setConfirmPasswordError(true);\r\n      setIsSpecialLetter(false);\r\n      return;\r\n    }\r\n    if (!re.test(confirmNewPassword)) {\r\n      setIsSpecialLetter(true);\r\n      setConfirmPasswordError(false);\r\n      return;\r\n    }\r\n\r\n    addNewPassword({ confirmNewPassword, email })\r\n      .unwrap()\r\n      .then((data) => {\r\n        console.log(\"data\", data);\r\n        if (data.message) {\r\n          setConfirmPasswordError(false);\r\n          setIsSpecialLetter(false);\r\n          navigate(\"/login\");\r\n        } else {\r\n          navigate(\"/verify-forgot-password\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        dispatch(setResetPasswordError(error.message));\r\n        console.log(\"err\", error);\r\n      });\r\n  };\r\n  const handleNewPassword = (value) => {\r\n    setNewPassword(value);\r\n  };\r\n\r\n  const handleConfimPassword = (value) => {\r\n    setConfirmNewPassword(value);\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <Container\r\n        width=\"727px\"\r\n        margin=\"100px\"\r\n        padding=\"70px\"\r\n        borderRadius=\"20px\"\r\n      >\r\n        <Title margin=\"30px\">Set New Password</Title>\r\n\r\n        {confirmPasswordError && (\r\n          <Paragraph color=\"#FF5F5F\">Password does not matched</Paragraph>\r\n        )}\r\n        {isSpecialLetter && (\r\n          <Paragraph color=\"#FF5F5F\">\r\n            Password should have at least one special character one number and\r\n            one capital letter i.e 0,1,A,%,$,%,Z\r\n          </Paragraph>\r\n        )}\r\n\r\n        <InputGroup\r\n          label=\"Set new password\"\r\n          placeholder=\"Enter your password here\"\r\n          type=\"password\"\r\n          value={newPassword}\r\n          onChange={(e) => handleNewPassword(e.target.value)}\r\n        />\r\n        <InputGroup\r\n          label=\"Confirm password\"\r\n          placeholder=\"Re-type your password here\"\r\n          type=\"password\"\r\n          value={confirmNewPassword}\r\n          onChange={(e) => handleConfimPassword(e.target.value)}\r\n        />\r\n\r\n        <ButtonBar>\r\n          <Button color=\"#00A652\" onClick={handleChangePassword}>\r\n            Submit\r\n          </Button>\r\n        </ButtonBar>\r\n\r\n        <Back />\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"names":["ChangePassword","navigate","useNavigate","dispatch","useDispatch","useState","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","isSpecialLetter","setIsSpecialLetter","confirmPasswordError","setConfirmPasswordError","setResetPasswordError","useSetNewPasswordMutation","addNewPassword","changePasswordSuccess","useSelector","state","reducer","changePassword","success","email","resetPassword","auth","token","useEffect","width","margin","padding","borderRadius","color","label","placeholder","type","value","onChange","e","target","onClick","test","unwrap","then","data","console","log","message","catch","error"],"sourceRoot":""}